name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build module for l402
        run: cargo build --release --features export-modules

      - name: Set up Docker Compose
        env:
          LNURL_ADDRESS: ${{ secrets.LNURL_ADDRESS }}
          ROOT_KEY: ${{ secrets.ROOT_KEY }}
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose.yml up --build -d

      - name: Create env file
        run: |
          touch .env
          echo ROOT_KEY=${{ secrets.ROOT_KEY }} >> .env
          cat .env

      - name: Test Nginx Module with LNURL
        run: |
          docker logs nginx

          echo "Testing with LNURL configuration..."
          
          # Test unprotected endpoint
          echo "Testing unprotected endpoint..."
          curl -v http://0.0.0.0:8000/
          
          # Test protected endpoint
          echo "Testing protected endpoint..."
          response=$(curl -v http://0.0.0.0:8000/protected)
          echo "Response: $response"
          
          # Verify response headers for L402 authentication
          echo "Verifying L402 headers..."
          curl -I http://0.0.0.0:8000/protected | grep -i "www-authenticate"

      - name: Verify Bitcoin daemon Service and create wallet
        run: |
          wallet_name="new_wallet"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass createwallet $wallet_name
          address=$(docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass getnewaddress $wallet_name)
          echo "New Wallet Address: $address"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass generatetoaddress 101 "$address"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass sendtoaddress bcrt1pcngfxjdkf4r2h26k52dh5nunxg8m68uf4lkfhmfjvjj6agfkm5jqmftw4e 0.0001
          docker logs bitcoind

      - name: Verify LND node
        run: |
          identity_pubkey_lndnode=$(docker exec lndnode lncli -n regtest getinfo | jq -r '.identity_pubkey')
          echo "Pubkey: $identity_pubkey_lndnode"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass -generate 5
          docker logs lndnode

      - name: Extract Macaroon and Cert Paths
        run: |
          CONTAINER_NAME="lndnode"

          # Define paths to the macaroon and certificate in the container
          MACAROON_PATH="/root/.lnd/data/chain/bitcoin/regtest/admin.macaroon"
          CERT_PATH="/root/.lnd/tls.cert"

          # Copy macaroon from the container to the workspace
          docker cp ${CONTAINER_NAME}:${MACAROON_PATH} ./admin.macaroon

          # Copy certificate from the container to the workspace
          docker cp ${CONTAINER_NAME}:${CERT_PATH} ./tls.cert

      - name: Test Nginx Module with LND
        run: |
          docker logs nginx

          echo "Testing with LND configuration..."
          export LN_CLIENT_TYPE=LND
          export LND_ADDRESS=0.0.0.0:10009
          
          # Test unprotected endpoint
          echo "Testing unprotected endpoint..."
          curl -v http://0.0.0.0:8000/
          
          # Test protected endpoint
          echo "Testing protected endpoint..."
          response=$(curl -v http://0.0.0.0:8000/protected)
          echo "Response: $response"
          
          # Verify response headers for L402 authentication
          echo "Verifying L402 headers..."
          curl -I http://0.0.0.0:8000/protected | grep -i "www-authenticate"
