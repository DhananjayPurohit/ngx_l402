name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build module for l402
        run: cargo build --release --features export-modules

      - name: Set up Docker Compose
        env:
          LNURL_ADDRESS: ${{ secrets.LNURL_ADDRESS }}
          ROOT_KEY: ${{ secrets.ROOT_KEY }}
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose.yml up -d bitcoind lndnode nginx-lnurl

      - name: Create env file
        run: |
          touch .env
          echo ROOT_KEY=${{ secrets.ROOT_KEY }} >> .env
          cat .env

      - name: Run Integration Tests - LNURL
        id: lnurl_tests
        continue-on-error: true
        run: |
          docker logs nginx-lnurl
          echo "Testing with LNURL configuration..."
          sleep 30
          
          test_failed=false

          # Test free route
          echo "Testing free route..."
          response=$(curl -s -w "\n%{http_code}" -L http://0.0.0.0:8000/)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Free route returned status $status_code, expected 200"
            docker logs nginx-lnurl
            test_failed=true
          fi

          # Test protected route without header
          echo "Testing protected route without header..."
          response=$(curl -s -w "\n%{http_code}" -L http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 402 ]; then
            echo "Error: Protected route without header returned status $status_code, expected 402"
            docker logs nginx-lnurl
            test_failed=true
          fi

          # Test with valid L402 credentials
          echo "Testing with valid L402 credentials..."
          response=$(curl -s -w "\n%{http_code}" -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:e582fba50ca50a9a262cbb92fc38617ce0a2413ef1dd4c7062cbaef22b33a404" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Protected route with valid L402 returned status $status_code, expected 200"
            docker logs nginx-lnurl
            test_failed=true
          fi

          # Test with invalid preimage
          echo "Testing with invalid preimage..."
          response=$(curl -s -w "\n%{http_code}" -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:fbe9ac25c04e14b10177514e2d57b0e39224e70277ac1a2cd23c28e58cd4ea35" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with invalid preimage returned status $status_code, expected 500"
            docker logs nginx-lnurl
            test_failed=true
          fi

          # Test with macaroon without caveats
          echo "Testing with macaroon without caveats..."
          response=$(curl -s -w "\n%{http_code}" -L -H "Authorization: L402 AgEETFNBVALmAUr/gQMBARJNYWNhcm9vbklkZW50aWZpZXIB/4IAAQMBB1ZlcnNpb24BBgABC1BheW1lbnRIYXNoAf+EAAEHVG9rZW5JZAH/hgAAABT/gwEBAQRIYXNoAf+EAAEGAUAAABn/hQEBAQlbMzJddWludDgB/4YAAQYBQAAAa/+CAiD/pv/jOjY1/9oC/4z/tHb/qf/2Jf+d/4H/u/+YGHj/+/+O/8D/v/+P/8X/qRL/5v/x/4r/tkIBIA1Y/8j/pR3/0P+b/7cwWP+W/87/sD18GP//Hf/f/9Aj//NcBFs2/9VhNEUF/70AAAAGIDlR1jVm5IfEJgvuSQoJLqLg4FcW4Ib1vW8sbkRHdUWX:651505fae9ea341c770c6ebef207d8560d546eb3aee26985e584c15d1c987875" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with macaroon without caveats returned status $status_code, expected 500"
            docker logs nginx-lnurl
            test_failed=true
          fi

          # Shut down LNURL service
          docker-compose -f docker-compose.yml stop nginx-lnurl

          if [ "$test_failed" = true ]; then
            echo "::error::LNURL tests failed"
            exit 1
          fi

      - name: Verify Bitcoin daemon Service and create wallet
        id: bitcoin_setup
        continue-on-error: true
        run: |
          wallet_name="new_wallet"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass createwallet $wallet_name
          address=$(docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass getnewaddress $wallet_name)
          echo "New Wallet Address: $address"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass generatetoaddress 101 "$address"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass sendtoaddress bcrt1pcngfxjdkf4r2h26k52dh5nunxg8m68uf4lkfhmfjvjj6agfkm5jqmftw4e 0.0001
          docker logs bitcoind

      - name: Verify LND node
        id: lnd_setup
        continue-on-error: true
        run: |
          identity_pubkey_lndnode=$(docker exec lndnode lncli -n regtest getinfo | jq -r '.identity_pubkey')
          echo "Pubkey: $identity_pubkey_lndnode"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass -generate 5
          docker logs lndnode

      - name: Start nginx containers
        id: nginx_setup
        continue-on-error: true
        run: |
          # Start the remaining services
          docker-compose -f docker-compose.yml up -d --no-deps nginx-lnd

      - name: Run Integration Tests - LND
        id: lnd_tests
        continue-on-error: true
        run: |
          docker logs nginx-lnd
          echo "Testing with LND configuration..."
          sleep 30

          test_failed=false

          # Test free route
          echo "Testing free route..."
          response=$(curl -s -w "\n%{http_code}" -L http://0.0.0.0:8000/)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Free route returned status $status_code, expected 200"
            docker logs nginx-lnd
            test_failed=true
          fi

          # Test protected route without header
          echo "Testing protected route without header..."
          response=$(curl -s -w "\n%{http_code}" -L http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 402 ]; then
            echo "Error: Protected route without header returned status $status_code, expected 402"
            docker logs nginx-lnd
            test_failed=true
          fi

          # Test with valid L402 credentials
          echo "Testing with valid L402 credentials..."
          response=$(curl -s -w "\n%{http_code}" -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:e582fba50ca50a9a262cbb92fc38617ce0a2413ef1dd4c7062cbaef22b33a404" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Protected route with valid L402 returned status $status_code, expected 200"
            docker logs nginx-lnd
            test_failed=true
          fi

          # Test with invalid preimage
          echo "Testing with invalid preimage..."
          response=$(curl -s -w "\n%{http_code}" -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:fbe9ac25c04e14b10177514e2d57b0e39224e70277ac1a2cd23c28e58cd4ea35" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with invalid preimage returned status $status_code, expected 500"
            docker logs nginx-lnd
            test_failed=true
          fi

          # Test with macaroon without caveats
          echo "Testing with macaroon without caveats..."
          response=$(curl -s -w "\n%{http_code}" -L -H "Authorization: L402 AgEETFNBVALmAUr/gQMBARJNYWNhcm9vbklkZW50aWZpZXIB/4IAAQMBB1ZlcnNpb24BBgABC1BheW1lbnRIYXNoAf+EAAEHVG9rZW5JZAH/hgAAABT/gwEBAQRIYXNoAf+EAAEGAUAAABn/hQEBAQlbMzJddWludDgB/4YAAQYBQAAAa/+CAiD/pv/jOjY1/9oC/4z/tHb/qf/2Jf+d/4H/u/+YGHj/+/+O/8D/v/+P/8X/qRL/5v/x/4r/tkIBIA1Y/8j/pR3/0P+b/7cwWP+W/87/sD18GP//Hf/f/9Aj//NcBFs2/9VhNEUF/70AAAAGIDlR1jVm5IfEJgvuSQoJLqLg4FcW4Ib1vW8sbkRHdUWX:651505fae9ea341c770c6ebef207d8560d546eb3aee26985e584c15d1c987875" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with macaroon without caveats returned status $status_code, expected 500"
            docker logs nginx-lnd
            test_failed=true
          fi

          if [ "$test_failed" = true ]; then
            echo "::error::LND tests failed"
            exit 1
          fi

      - name: Check test results
        if: always()
        run: |
          if [ "${{ steps.lnurl_tests.outcome }}" == "failure" ] || \
             [ "${{ steps.bitcoin_setup.outcome }}" == "failure" ] || \
             [ "${{ steps.lnd_setup.outcome }}" == "failure" ] || \
             [ "${{ steps.nginx_setup.outcome }}" == "failure" ] || \
             [ "${{ steps.lnd_tests.outcome }}" == "failure" ]; then
            echo "Some tests failed!"
            exit 1
          fi
