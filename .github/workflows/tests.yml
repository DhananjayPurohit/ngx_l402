name: Integration Tests

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build module for l402
        run: cargo build --release --features export-modules

      - name: Set up Docker Compose
        env:
          ROOT_KEY: ${{ secrets.ROOT_KEY }}
          CURRENCY: USD
          AMOUNT: 0.01
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose.yml up -d bitcoind lndnode

      - name: Create env file
        run: |
          touch .env
          echo ROOT_KEY=${{ secrets.ROOT_KEY }} >> .env
          cat .env

      - name: Start LNURL service
        env:
          LNURL_ADDRESS: ${{ secrets.LNURL_ADDRESS }}
        run: |
          docker-compose -f docker-compose.yml up -d nginx-lnurl

      - name: Run Integration Tests - LNURL
        run: |
          docker logs nginx-lnurl
          echo "Testing with LNURL configuration..."
          sleep 15

          # Test free route
          echo "Testing free route..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L http://0.0.0.0:8000/)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Free route returned status $status_code, expected 200"
            docker logs nginx-lnurl
            exit 1
          fi

          # Test protected route without header
          echo "Testing protected route without header..."
          response=$(curl -s -i -w "\n%{http_code}" --max-time 30 -L http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 402 ]; then
            echo "Error: Protected route without header returned status $status_code, expected 402"
            docker logs nginx-lnurl
            exit 1
          fi
          
          # Check if WWW-Authenticate header is present
          if ! echo "$response" | grep -q 'WWW-Authenticate: L402 macaroon='; then
            echo "Error: WWW-Authenticate header is missing in the 402 response"
            echo "$response"
            docker logs nginx-lnurl
            exit 1
          fi

          # Test with valid L402 credentials
          echo "Testing with valid L402 credentials..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:e582fba50ca50a9a262cbb92fc38617ce0a2413ef1dd4c7062cbaef22b33a404" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Protected route with valid L402 returned status $status_code, expected 200"
            docker logs nginx-lnurl
            exit 1
          fi

          # Test with invalid preimage
          echo "Testing with invalid preimage..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:fbe9ac25c04e14b10177514e2d57b0e39224e70277ac1a2cd23c28e58cd4ea35" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with invalid preimage returned status $status_code, expected 500"
            docker logs nginx-lnurl
            exit 1
          fi

          # Test with macaroon without caveats
          echo "Testing with macaroon without caveats..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 AgEETFNBVALmAUr/gQMBARJNYWNhcm9vbklkZW50aWZpZXIB/4IAAQMBB1ZlcnNpb24BBgABC1BheW1lbnRIYXNoAf+EAAEHVG9rZW5JZAH/hgAAABT/gwEBAQRIYXNoAf+EAAEGAUAAABn/hQEBAQlbMzJddWludDgB/4YAAQYBQAAAa/+CAiD/pv/jOjY1/9oC/4z/tHb/qf/2Jf+d/4H/u/+YGHj/+/+O/8D/v/+P/8X/qRL/5v/x/4r/tkIBIA1Y/8j/pR3/0P+b/7cwWP+W/87/sD18GP//Hf/f/9Aj//NcBFs2/9VhNEUF/70AAAAGIDlR1jVm5IfEJgvuSQoJLqLg4FcW4Ib1vW8sbkRHdUWX:651505fae9ea341c770c6ebef207d8560d546eb3aee26985e584c15d1c987875" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with macaroon without caveats returned status $status_code, expected 500"
            docker logs nginx-lnurl
            exit 1
          fi

      - name: Stop LNURL service
        run: |
          docker-compose -f docker-compose.yml stop nginx-lnurl

      - name: Start NWC service
        env:
          NWC_URI: ${{ secrets.NWC_URI }}
        run: |
          docker-compose -f docker-compose.yml up -d nginx-nwc

      - name: Run Integration Tests - NWC
        run: |
          docker logs nginx-nwc
          echo "Testing with NWC configuration..."
          sleep 15

          # Test free route
          echo "Testing free route..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L http://0.0.0.0:8000/)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Free route returned status $status_code, expected 200"
            docker logs nginx-nwc
            exit 1
          fi

          # Test protected route without header
          echo "Testing protected route without header..."
          response=$(curl -s -i -w "\n%{http_code}" --max-time 60 -L http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 402 ]; then
            echo "Error: Protected route without header returned status $status_code, expected 402"
            docker logs nginx-nwc
            exit 1
          fi
          
          # Check if WWW-Authenticate header is present
          if ! echo "$response" | grep -q 'WWW-Authenticate: L402 macaroon='; then
            echo "Error: WWW-Authenticate header is missing in the 402 response"
            echo "$response"
            docker logs nginx-nwc
            exit 1
          fi

          # Test with valid L402 credentials
          echo "Testing with valid L402 credentials..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:e582fba50ca50a9a262cbb92fc38617ce0a2413ef1dd4c7062cbaef22b33a404" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Protected route with valid L402 returned status $status_code, expected 200"
            docker logs nginx-nwc
            exit 1
          fi

          # Test with invalid preimage
          echo "Testing with invalid preimage..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:fbe9ac25c04e14b10177514e2d57b0e39224e70277ac1a2cd23c28e58cd4ea35" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with invalid preimage returned status $status_code, expected 500"
            docker logs nginx-nwc
            exit 1
          fi

          # Test with macaroon without caveats
          echo "Testing with macaroon without caveats..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 AgEETFNBVALmAUr/gQMBARJNYWNhcm9vbklkZW50aWZpZXIB/4IAAQMBB1ZlcnNpb24BBgABC1BheW1lbnRIYXNoAf+EAAEHVG9rZW5JZAH/hgAAABT/gwEBAQRIYXNoAf+EAAEGAUAAABn/hQEBAQlbMzJddWludDgB/4YAAQYBQAAAa/+CAiD/pv/jOjY1/9oC/4z/tHb/qf/2Jf+d/4H/u/+YGHj/+/+O/8D/v/+P/8X/qRL/5v/x/4r/tkIBIA1Y/8j/pR3/0P+b/7cwWP+W/87/sD18GP//Hf/f/9Aj//NcBFs2/9VhNEUF/70AAAAGIDlR1jVm5IfEJgvuSQoJLqLg4FcW4Ib1vW8sbkRHdUWX:651505fae9ea341c770c6ebef207d8560d546eb3aee26985e584c15d1c987875" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with macaroon without caveats returned status $status_code, expected 500"
            docker logs nginx-nwc
            exit 1
          fi

      - name: Stop NWC service
        run: |
          docker-compose -f docker-compose.yml stop nginx-nwc

      - name: Verify Bitcoin daemon Service and create wallet
        run: |
          wallet_name="new_wallet"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass createwallet $wallet_name
          address=$(docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass getnewaddress $wallet_name)
          echo "New Wallet Address: $address"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass generatetoaddress 101 "$address"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass sendtoaddress bcrt1pcngfxjdkf4r2h26k52dh5nunxg8m68uf4lkfhmfjvjj6agfkm5jqmftw4e 0.0001
          docker logs bitcoind

      - name: Verify LND node
        run: |
          identity_pubkey_lndnode=$(docker exec lndnode lncli -n regtest getinfo | jq -r '.identity_pubkey')
          echo "Pubkey: $identity_pubkey_lndnode"
          docker exec bitcoind bitcoin-cli -regtest -rpcuser=user -rpcpassword=pass -generate 5
          docker logs lndnode

      - name: Start nginx containers for LND
        env:
          CURRENCY: USD
          AMOUNT: 0.01
        run: |
          # Start the remaining services
          docker-compose -f docker-compose.yml up -d --no-deps nginx-lnd

      - name: Run Integration Tests - LND
        run: |
          docker logs nginx-lnd
          echo "Testing with LND configuration..."
          sleep 15

          # Test free route
          echo "Testing free route..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L http://0.0.0.0:8000/)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Free route returned status $status_code, expected 200"
            docker logs nginx-lnd
            exit 1
          fi

          # Test protected route without header
          echo "Testing protected route without header..."
          response=$(curl -s -i -w "\n%{http_code}" --max-time 30 -L http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 402 ]; then
            echo "Error: Protected route without header returned status $status_code, expected 402"
            docker logs nginx-lnd
            exit 1
          fi
          
          # Check if WWW-Authenticate header is present
          if ! echo "$response" | grep -q 'WWW-Authenticate: L402 macaroon='; then
            echo "Error: WWW-Authenticate header is missing in the 402 response"
            echo "$response"
            docker logs nginx-lnd
            exit 1
          fi

          # Test with valid L402 credentials
          echo "Testing with valid L402 credentials..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:e582fba50ca50a9a262cbb92fc38617ce0a2413ef1dd4c7062cbaef22b33a404" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Protected route with valid L402 returned status $status_code, expected 200"
            docker logs nginx-lnd
            exit 1
          fi

          # Test with invalid preimage
          echo "Testing with invalid preimage..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 MDAxMmxvY2F0aW9uIEw0MDIKMDAzMGlkZW50aWZpZXIgM460twjJAuVrQN-u5JPUZ0aKNWevybkbveRc2DeF2ZAKMDAyMWNpZCBSZXF1ZXN0UGF0aCA9IC9wcm90ZWN0ZWQKMDAyZnNpZ25hdHVyZSCwR6G2lDj1thda81BPwQuo73_shURzPf1XOwuejNLwVwo=:fbe9ac25c04e14b10177514e2d57b0e39224e70277ac1a2cd23c28e58cd4ea35" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with invalid preimage returned status $status_code, expected 500"
            docker logs nginx-lnd
            exit 1
          fi

          # Test with macaroon without caveats
          echo "Testing with macaroon without caveats..."
          response=$(curl -s -w "\n%{http_code}" --max-time 30 -L -H "Authorization: L402 AgEETFNBVALmAUr/gQMBARJNYWNhcm9vbklkZW50aWZpZXIB/4IAAQMBB1ZlcnNpb24BBgABC1BheW1lbnRIYXNoAf+EAAEHVG9rZW5JZAH/hgAAABT/gwEBAQRIYXNoAf+EAAEGAUAAABn/hQEBAQlbMzJddWludDgB/4YAAQYBQAAAa/+CAiD/pv/jOjY1/9oC/4z/tHb/qf/2Jf+d/4H/u/+YGHj/+/+O/8D/v/+P/8X/qRL/5v/x/4r/tkIBIA1Y/8j/pR3/0P+b/7cwWP+W/87/sD18GP//Hf/f/9Aj//NcBFs2/9VhNEUF/70AAAAGIDlR1jVm5IfEJgvuSQoJLqLg4FcW4Ib1vW8sbkRHdUWX:651505fae9ea341c770c6ebef207d8560d546eb3aee26985e584c15d1c987875" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with macaroon without caveats returned status $status_code, expected 500"
            docker logs nginx-lnd
            exit 1
          fi

          # Test Cashu eCash support
          echo "Testing Cashu eCash support..."
          
          # Install required tools
          apt-get update && apt-get install -y jq
          
          # Mint a test token from nofees.testnut.cashu.space
          echo "Minting a real Cashu token from nofees.testnut.cashu.space/..."
          
          # Step 1: Get the mint keys
          MINT_URL="https://nofees.testnut.cashu.space"
          MINT_KEYS_RESPONSE=$(curl -s "${MINT_URL}/v1/keys")
          
          # Step 2: Request a mint quote for 1000 sats
          MINT_QUOTE_RESPONSE=$(curl -s -X POST "${MINT_URL}/v1/mint/quote/bolt11" \
            -H "Content-Type: application/json" \
            -d '{"amount": 1000}')
          
          QUOTE_ID=$(echo $MINT_QUOTE_RESPONSE | jq -r '.quote')
          PAYMENT_REQUEST=$(echo $MINT_QUOTE_RESPONSE | jq -r '.request')
          
          echo "Mint quote ID: $QUOTE_ID"
          echo "Payment request: $PAYMENT_REQUEST"
          
          # For testing purposes, we'll simulate payment and directly request a token
          # In a real scenario, you would pay the Lightning invoice first
          
          # Step 3: Request a token (simulating that payment was made)
          MINT_TOKEN_RESPONSE=$(curl -s -X POST "${MINT_URL}/v1/mint" \
            -H "Content-Type: application/json" \
            -d "{\"quote\": \"$QUOTE_ID\"}")
          
          # Extract the token
          CASHU_TOKEN=$(echo $MINT_TOKEN_RESPONSE | jq -c .)
          
          echo "Cashu token: $CASHU_TOKEN"
          
          # Encode the token for HTTP header
          ENCODED_TOKEN=$(echo -n "$CASHU_TOKEN" | base64 -w 0)
          
          # Test protected route with Cashu token
          echo "Testing protected route with Cashu token..."
          response=$(curl -s -i -w "\n%{http_code}" --max-time 30 -L -H "Authorization: Cashu $ENCODED_TOKEN" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          
          # Since we're using a test token, it should be accepted if the verification logic is working
          # The expected status code depends on your implementation, but should be either 200 (success) or 500 (verification failed)
          if [ "$status_code" -ne 200 ]; then
            echo "Error: Protected route with Cashu token returned unexpected status $status_code"
            echo "$response"
            docker logs nginx-lnd
            exit 1
          fi
          
          # Test with invalid Cashu token (wrong amount)
          echo "Testing with invalid Cashu token (insufficient amount)..."
          
          # Create a token with insufficient amount (1 sats instead of 10)
          INVALID_CASHU_TOKEN='{
            "token": [
              {
                "mint": "https://nofees.testnut.cashu.space",
                "proofs": [
                  {
                    "id": "c78a4cf9-3c26-4d66-9b69-8e1bd583063b",
                    "amount": 1,
                    "secret": "fb2c9d39b468f84f6f9d853b6acf0f11e9616f8c98c6f4ecb92c956372228c77",
                    "C": "03c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5"
                  }
                ]
              }
            ]
          }'
          
          # Encode the invalid token
          ENCODED_INVALID_TOKEN=$(echo -n "$INVALID_CASHU_TOKEN" | base64 -w 0)
          
          # Test with the invalid token
          response=$(curl -s -i -w "\n%{http_code}" --max-time 30 -L -H "Authorization: Cashu $ENCODED_INVALID_TOKEN" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          
          # This should fail verification due to insufficient amount
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with invalid Cashu token returned status $status_code, expected 500"
            echo "$response"
            docker logs nginx-lnd
            exit 1
          fi
          
          # Test with malformed Cashu token
          echo "Testing with malformed Cashu token..."
          
          # Create a malformed token
          MALFORMED_CASHU_TOKEN='{
            "token": [
              {
                "mint": "https://nofees.testnut.cashu.space",
                "proofs": []
              }
            ]
          }'
          
          # Encode the malformed token
          ENCODED_MALFORMED_TOKEN=$(echo -n "$MALFORMED_CASHU_TOKEN" | base64 -w 0)
          
          # Test with the malformed token
          response=$(curl -s -i -w "\n%{http_code}" --max-time 30 -L -H "Authorization: Cashu $ENCODED_MALFORMED_TOKEN" http://0.0.0.0:8000/protected)
          status_code=$(echo "$response" | tail -n1)
          
          # This should fail verification due to empty proofs
          if [ "$status_code" -ne 500 ]; then
            echo "Error: Protected route with malformed Cashu token returned status $status_code, expected 500"
            echo "$response"
            docker logs nginx-lnd
            exit 1
          fi
          
          echo "All Cashu eCash tests completed successfully!"

      - name: Publish .so file
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          tar -czf libngx_l402_lib.tar.gz target/release/libngx_l402_lib.so
          gh release create ${GITHUB_REF#refs/tags/} libngx_l402_lib.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
